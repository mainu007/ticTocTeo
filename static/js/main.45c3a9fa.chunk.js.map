{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","box","text","clickEvent","palyText","eventContinue","winMsg","winnerText","winStyle","drawCheck","x","map","val","winCheck","result","wCheck","a","b","c","xWin","oWin","console","log","playGame","setState","handleClick","id","target","arr","splice","wc","boxText","transform","reloadHandle","Fragment","className","onClick","this","style","e","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45c3a9fa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    box: [\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n      { text: \"\", clickEvent: true },\n    ],\n    palyText: \"X\",\n    eventContinue: true,\n    winMsg: \"\",\n    winnerText: \"\",\n    winStyle: null,\n  };\n  drawCheck = () => {\n    let x = 0;\n    const box = this.state.box;\n    box.map((val) => {\n      if (val.clickEvent === false) {\n        x++;\n      }\n    });\n    return x;\n  };\n  winCheck = () => {\n    const box = this.state.box;\n    let result = \"\";\n    const wCheck = (a, b, c) => {\n      const xWin = a.text === \"X\" && b.text === \"X\" && c.text === \"X\";\n      const oWin = a.text === \"O\" && b.text === \"O\" && c.text === \"O\";\n      if (xWin) {\n        console.log(\"X is win\");\n        result = \"X\";\n      } else if (oWin) {\n        console.log(\"O is win\");\n        result = \"O\";\n      }\n    };\n    wCheck(box[0], box[1], box[2]);\n    wCheck(box[3], box[4], box[5]);\n    wCheck(box[6], box[7], box[8]);\n    wCheck(box[0], box[3], box[6]);\n    wCheck(box[1], box[4], box[7]);\n    wCheck(box[2], box[5], box[8]);\n    wCheck(box[0], box[4], box[8]);\n    wCheck(box[2], box[4], box[6]);\n    if (result) {\n      return result;\n    }\n    return result;\n  };\n  playGame = () => {\n    if (this.state.eventContinue) {\n      if (this.state.palyText === \"X\") {\n        this.setState({\n          palyText: \"O\",\n        });\n      } else {\n        this.setState({\n          palyText: \"X\",\n        });\n      }\n      return this.state.palyText;\n    }\n  };\n  handleClick = (x) => {\n    const id = x.target.id;\n    if (this.state.box[id].clickEvent) {\n      const arr = this.state.box;\n      arr.splice(id, 1, {\n        text: this.playGame(),\n        clickEvent: false,\n      });\n      const wc = this.winCheck();\n      if (wc) {\n        this.setState({\n          boxText: arr,\n          eventContinue: false,\n          winMsg: wc,\n          winnerText: \"Winner!\",\n          winStyle: { transform: \"scale(1)\" },\n        });\n      } else if (this.drawCheck() === 9) {\n        this.setState({\n          boxText: arr,\n          eventContinue: false,\n          winMsg: \"X|O\",\n          winnerText: \"Draw!\",\n          winStyle: { transform: \"scale(1)\" },\n        });\n      } else {\n        this.setState({\n          boxText: arr,\n        });\n      }\n    }\n  };\n  reloadHandle = () => {\n    const box = this.state.box.map((val) => {\n      val.text = \"\";\n      val.clickEvent = true;\n      return val;\n    });\n    this.setState({\n      box: box,\n      palyText: \"X\",\n      eventContinue: true,\n      winMsg: \"\",\n      winnerText: \"\",\n      winStyle: null,\n    });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <h1>Tic Tac Toe</h1>\n          <div className=\"row\">\n            <div\n              className=\"overlay\"\n              onClick={this.reloadHandle}\n              style={this.state.winStyle}\n            >\n              <div>\n                <h1>{this.state.winMsg}</h1>\n                <h2>{this.state.winnerText}</h2>\n              </div>\n            </div>\n            <div className=\"box\" onClick={(e) => this.handleClick(e)} id=\"0\">\n              {this.state.box[0].text}\n            </div>\n            <div className=\"box y\" onClick={(e) => this.handleClick(e)} id=\"1\">\n              {this.state.box[1].text}\n            </div>\n            <div className=\"box\" onClick={(e) => this.handleClick(e)} id=\"2\">\n              {this.state.box[2].text}\n            </div>\n            <div className=\"box x\" onClick={(e) => this.handleClick(e)} id=\"3\">\n              {this.state.box[3].text}\n            </div>\n            <div\n              className=\"box x y\"\n              onClick={(e) => this.handleClick(e)}\n              id=\"4\"\n            >\n              {this.state.box[4].text}\n            </div>\n            <div className=\"box x\" onClick={(e) => this.handleClick(e)} id=\"5\">\n              {this.state.box[5].text}\n            </div>\n            <div className=\"box\" onClick={(e) => this.handleClick(e)} id=\"6\">\n              {this.state.box[6].text}\n            </div>\n            <div className=\"box y\" onClick={(e) => this.handleClick(e)} id=\"7\">\n              {this.state.box[7].text}\n            </div>\n            <div className=\"box\" onClick={(e) => this.handleClick(e)} id=\"8\">\n              {this.state.box[8].text}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}